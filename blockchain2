import json
import hashlib

def gcd(a, b):
    while b:
        a, b = b, a % b 
    return a

def mod_inverse(e, phi):
    for d in range(1, phi):
        if (e * d) % phi == 1:
            return d
    return None
def sha256(data):
    return hashlib.sha256(data.encode()).hexdigest()


def generate_keys():
  
    p = 349
    q = 397
    n = p * q
    phi = (p - 1) * (q - 1)
    e = 17  
    d = mod_inverse(e, phi)
    return (e, n), (d, n)
def sign(private_key, document):
    d, n = private_key
    document_hash = int(sha256(document), 16) % n
    return pow(document_hash, d, n)

def verify(public_key, document, signature):
    e, n = public_key
    document_hash = int(sha256(document), 16) % n
    calculated_hash = pow(signature, e, n)
    return document_hash == calculated_hash
class Transaction:
    def __init__(self, sender, receiver, amount):
        self.sender = sender
        self.receiver = receiver
        self.amount = amount
        self.signature = None

    def sign_transaction(self, private_key):
        document = f"{self.sender}{self.receiver}{self.amount}"
        self.signature = sign(private_key, document)

    def __str__(self):
        return f"Transaction(sender={self.sender}, receiver={self.receiver}, amount={self.amount}, signature={self.signature})"
